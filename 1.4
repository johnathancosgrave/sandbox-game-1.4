<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Browser Minecraft Clone</title>
    <style>
        body { margin: 0; overflow: hidden; }
        canvas { display: block; }
    </style>
</head>
<body>
<script src="https://cdn.jsdelivr.net/npm/three@0.158.0/build/three.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/three@0.158.0/examples/js/controls/PointerLockControls.js"></script>

<script>
let scene, camera, renderer, controls;
let blocks = [];
let raycaster = new THREE.Raycaster();
let mouse = new THREE.Vector2();
let selectedBlockType = 0;

// Block colors/types
const blockTypes = [
    0x00ff00, // Grass
    0x964B00, // Dirt
    0x808080, // Stone
    0x000000, // Coal ore
    0xffd700, // Gold ore
    0x00ffff  // Diamond ore
];

init();
animate();

function init() {
    scene = new THREE.Scene();
    scene.background = new THREE.Color(0x87CEEB);

    camera = new THREE.PerspectiveCamera(75, window.innerWidth/window.innerHeight, 0.1, 1000);
    camera.position.set(5, 5, 5);

    renderer = new THREE.WebGLRenderer({antialias:true});
    renderer.setSize(window.innerWidth, window.innerHeight);
    document.body.appendChild(renderer.domElement);

    controls = new THREE.PointerLockControls(camera, document.body);
    document.body.addEventListener('click', () => { controls.lock(); });

    // Light
    const ambientLight = new THREE.AmbientLight(0xffffff, 0.7);
    scene.add(ambientLight);
    const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);
    directionalLight.position.set(10,20,10);
    scene.add(directionalLight);

    // Generate flat world with random ores
    for(let x=0;x<10;x++){
        for(let z=0;z<10;z++){
            let y = 0;
            let type = (Math.random()<0.1) ? Math.floor(Math.random()*blockTypes.length) : 0;
            addBlock(x,y,z,type);
        }
    }

    // Event listeners for placing/breaking blocks
    window.addEventListener('mousedown', onMouseDown);
    window.addEventListener('resize', onWindowResize);
}

// Add block
function addBlock(x,y,z,type){
    let geometry = new THREE.BoxGeometry(1,1,1);
    let material = new THREE.MeshStandardMaterial({color: blockTypes[type]});
    let cube = new THREE.Mesh(geometry, material);
    cube.position.set(x,y,z);
    cube.userData = {type:type};
    scene.add(cube);
    blocks.push(cube);
}

// Remove block
function removeBlock(cube){
    scene.remove(cube);
    blocks.splice(blocks.indexOf(cube),1);
}

// Handle mouse input
function onMouseDown(event){
    raycaster.setFromCamera(new THREE.Vector2(), camera);
    const intersects = raycaster.intersectObjects(blocks);
    if(intersects.length>0){
        const intersect = intersects[0];
        if(event.button === 0){ // Left click = break
            removeBlock(intersect.object);
        }else if(event.button === 2){ // Right click = place
            let normal = intersect.face.normal;
            let pos = intersect.object.position.clone().add(normal);
            addBlock(pos.x,pos.y,pos.z, selectedBlockType);
        }
    }
}

// Animate
function animate(){
    requestAnimationFrame(animate);
    renderer.render(scene,camera);
}

// Window resize
function onWindowResize(){
    camera.aspect = window.innerWidth/window.innerHeight;
    camera.updateProjectionMatrix();
    renderer.setSize(window.innerWidth, window.innerHeight);
}
</script>
</body>
</html>
